import SwiftUI

struct DigitalClockView: View {
    @ObservedObject private var themeManager = ThemeManager.shared
    @State private var currentTime = Date()
    private let timer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()
    
    // ËÆ°Êó∂Âô®Áõ∏ÂÖ≥ÂèÇÊï∞ÔºàÊöÇÊó∂‰øùÁïô‰ΩÜ‰∏ç‰ΩøÁî®Ôºâ
    var timerViewModel: TimerViewModel? = nil
    var isCompactMode: Bool = false
    
    var body: some View {
        VStack(spacing: 16) {
            // ‰∏ªË¶ÅÊó∂ÈíüÊòæÁ§∫
            HStack(spacing: 0) {
                // Êó∂
                TimeDigitView(text: hourString, size: DesignSystem.Sizes.clockDigit)
                
                // ÂÜíÂè∑ÔºàÂ∏¶Èó™ÁÉÅÂä®ÁîªÔºâ
                TimeDigitView(text: ":", size: DesignSystem.Sizes.colon)
                    .opacity(shouldShowColon ? 1.0 : 0.3)
                    .animation(.easeInOut(duration: 1.0).repeatForever(autoreverses: true), value: currentTime)
                    .padding(.horizontal, DesignSystem.Spacing.clockDigitSpacing)
                
                // ÂàÜ
                TimeDigitView(text: minuteString, size: DesignSystem.Sizes.clockDigit)
                
                // ÂÜíÂè∑ÔºàÂ∏¶Èó™ÁÉÅÂä®ÁîªÔºâ
                TimeDigitView(text: ":", size: DesignSystem.Sizes.colon)
                    .opacity(shouldShowColon ? 1.0 : 0.3)
                    .animation(.easeInOut(duration: 1.0).repeatForever(autoreverses: true), value: currentTime)
                    .padding(.horizontal, DesignSystem.Spacing.clockDigitSpacing)
                
                // Áßí
                TimeDigitView(text: secondString, size: DesignSystem.Sizes.clockDigit)
            }
            .shadow(color: DesignSystem.Shadows.largePrimaryShadow.color, 
                   radius: DesignSystem.Shadows.largePrimaryShadow.radius,
                   x: DesignSystem.Shadows.largePrimaryShadow.x,
                   y: DesignSystem.Shadows.largePrimaryShadow.y)
            .shadow(color: DesignSystem.Shadows.largeSecondaryShadow.color,
                   radius: DesignSystem.Shadows.largeSecondaryShadow.radius,
                   x: DesignSystem.Shadows.largeSecondaryShadow.x,
                   y: DesignSystem.Shadows.largeSecondaryShadow.y)
        }
        .onReceive(timer) { input in
            currentTime = input
        }
        .accessibilityElement(children: .ignore)
        .accessibilityLabel(Text(accessibilityTimeString))
    }
    
    // ËÆ°ÁÆóÊòæÁ§∫ÁöÑÊó∂Èó¥Â≠óÁ¨¶‰∏≤
    private var hourString: String {
        if let viewModel = timerViewModel, viewModel.isRunning || viewModel.remainingSeconds > 0 {
            // ÊòæÁ§∫ÂÄíËÆ°Êó∂Êó∂Èó¥
            let totalMinutes = viewModel.remainingSeconds / 60
            let hours = totalMinutes / 60
            let result = String(format: "%02d", hours)
            // print("üïê hourString: ÂÄíËÆ°Êó∂Ê®°Âºè - remainingSeconds=\(viewModel.remainingSeconds), hours=\(hours), result='\(result)'")
            return result
        } else {
            // ÊòæÁ§∫ÂΩìÂâçÊó∂Èó¥
            let hour = Calendar.current.component(.hour, from: currentTime)
            let result = String(format: "%02d", hour)
            // print("üïê hourString: Êó∂ÈíüÊ®°Âºè - currentTime=\(currentTime), hour=\(hour), result='\(result)'")
            return result
        }
    }
    
    private var minuteString: String {
        if let viewModel = timerViewModel, viewModel.isRunning || viewModel.remainingSeconds > 0 {
            // ÊòæÁ§∫ÂÄíËÆ°Êó∂Êó∂Èó¥
            let totalMinutes = viewModel.remainingSeconds / 60
            let minutes = totalMinutes % 60
            let result = String(format: "%02d", minutes)
            // print("üïê minuteString: ÂÄíËÆ°Êó∂Ê®°Âºè - remainingSeconds=\(viewModel.remainingSeconds), minutes=\(minutes), result='\(result)'")
            return result
        } else {
            // ÊòæÁ§∫ÂΩìÂâçÊó∂Èó¥
            let minute = Calendar.current.component(.minute, from: currentTime)
            let result = String(format: "%02d", minute)
            // print("üïê minuteString: Êó∂ÈíüÊ®°Âºè - currentTime=\(currentTime), minute=\(minute), result='\(result)'")
            return result
        }
    }
    
    private var secondString: String {
        if let viewModel = timerViewModel, viewModel.isRunning || viewModel.remainingSeconds > 0 {
            // ÊòæÁ§∫ÂÄíËÆ°Êó∂Êó∂Èó¥
            let seconds = viewModel.remainingSeconds % 60
            return String(format: "%02d", seconds)
        } else {
            // ÊòæÁ§∫ÂΩìÂâçÊó∂Èó¥
            let second = Calendar.current.component(.second, from: currentTime)
            return String(format: "%02d", second)
        }
    }
    
    private var shouldShowColon: Bool {
        // ÂÜíÂè∑Èó™ÁÉÅÊïàÊûú
        let second = Calendar.current.component(.second, from: currentTime)
        return second % 2 == 0
    }
    
    /// Âà§Êñ≠ÊòØÂê¶Â§Ñ‰∫éËÆ°Êó∂Ê®°Âºè
    private var isInTimerMode: Bool {
        if let viewModel = timerViewModel {
            return viewModel.isRunning || viewModel.remainingSeconds > 0
        }
        return false
    }
    
    private var accessibilityTimeString: String {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm:ss"
        return "ÂΩìÂâçÊó∂Èó¥Ôºö" + formatter.string(from: currentTime)
    }
}

/// Êó∂Èó¥Êï∞Â≠óÊòæÁ§∫ÁªÑ‰ª∂ÔºåÈÅøÂÖçÈáçÂ§çË∞ÉÁî®Â≠óÁ¨¶‰∏≤ËÆ°ÁÆó
struct TimeDigitView: View {
    @ObservedObject private var themeManager = ThemeManager.shared
    let text: String
    let size: CGFloat
    
    var body: some View {
        Text(text)
            .font(DesignSystem.Fonts.clockDigit(size: size))
            .foregroundColor(.clear)
            .overlay(
                Text(text)
                    .font(DesignSystem.Fonts.clockDigit(size: size))
                    .foregroundStyle(themeManager.currentTheme.primaryGradient)
            )
            .shadow(color: DesignSystem.Shadows.clockDigitShadow.color,
                   radius: DesignSystem.Shadows.clockDigitShadow.radius,
                   x: DesignSystem.Shadows.clockDigitShadow.x,
                   y: DesignSystem.Shadows.clockDigitShadow.y)
            .shadow(color: DesignSystem.Shadows.clockDigitSecondaryShadow.color,
                   radius: DesignSystem.Shadows.clockDigitSecondaryShadow.radius,
                   x: DesignSystem.Shadows.clockDigitSecondaryShadow.x,
                   y: DesignSystem.Shadows.clockDigitSecondaryShadow.y)
            .fixedSize()
    }
}

#if DEBUG
struct DigitalClockView_Previews: PreviewProvider {
    static var previews: some View {
        DigitalClockView()
            .previewLayout(.sizeThatFits)
            .padding()
    }
}
#endif